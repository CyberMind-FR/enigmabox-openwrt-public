#!/bin/ash
export LC_ALL=en_US.UTF-8

# vars

remoteaddresses="{{#peerings}}{{ip}} {{/peerings}}{{#missioncontrol}}{{ip}} {{/missioncontrol}}"

orggatewayfile="/tmp/cjdns_org_gw"
internet_interface="eth0"
wlan_interface="wlan0"
ping="ping -c 5 -W 5"
cjdns_request_tries="/tmp/cjdns_request_tries"
netstat_file="/tmp/netstat"
pidfile="/tmp/setup-cjdns-networking.pid"
ssid="{{wlan_ssid}}"
wep_pass="{{wlan_pass}}"
txpower="{{wlan_txpower}}"    #options: NmW, N (value in dB), off, auto
rate="{{wlan_rate}}"          #transmit rate (lower is usually more stable)
security="{{wlan_security}}"

{{#if_internet_gateway}}
request_internet="yes"
{{/if_internet_gateway}}

{{^if_internet_gateway}}
request_internet="no"
{{/if_internet_gateway}}



# check if its already running
kill -0 $(cat "$pidfile" 2> /dev/null) 2> /dev/null
if [[ "$?" == "0" ]]; then
    echo "script is already running"
    exit 0
fi

echo $$ > "$pidfile"



# functions

e() {
    echo 1>&2
    echo 1>&2
    echo "$1" 1>&2
}

dhcp() {
    if [[ -e "/sys/class/net/$wlan_interface" ]]; then
        e "wifi detected"

        internet_interface="$wlan_interface"

        ifconfig eth0 down
        iwconfig "$wlan_interface" txpower "$txpower"
        iwconfig "$wlan_interface" rate "$rate"

        if [[ "$security" = "WPA" ]]; then
            start_wpa
        else
            start_wep
        fi
    fi

    ifconfig "$internet_interface" up

    if [[ $( route -n | grep ^0.0.0.0 | wc -l ) -eq 0 ]]; then
        e "dhcp request $internet_interface"
        udhcpc -nq
        sleep 3
    fi
}

start_wpa() {
    e "start WPA session"

    # return if wpa_supplicant is already running
    [[ $(pidof wpa_supplicant | wc -l) -gt 0 ]] && return

    # make sure wpa_supplicant is absent
    rm "/var/run/wpa_supplicant/$wlan_interface" 2> /dev/null

    wpa_supplicant -i "$wlan_interface" -D wext -c /etc/wpa_supplicant/wpa_supplicant.conf -B
}

start_wep() {
    e "start WEP session"
    ifconfig "$wlan_interface" up
    iwconfig "$wlan_interface" essid "$ssid"
    iwconfig "$wlan_interface" key "$wep_pass"
}

request_cjdns_internet() {
    try=$(cat "$cjdns_request_tries" 2> /dev/null)
    try=$(($try+1))
    echo "$try" > "$cjdns_request_tries"

    # try another countryserver after the 2nd try
    if [[ "$try" -ge 2 ]]; then
        e "switching to an alternative server"
        curl http://127.0.0.1:8000/api/v1/set_next_country &> /dev/null
        /usr/sbin/cfengine-apply
    fi

    # request cjdns internet via script after the 3rd try
    if [[ "$try" -ge 3 ]]; then
        e "request cjdns internet"
        /usr/sbin/request-internet.py 2> /dev/null
    fi
}

start_cjdns() {
    if [[ "$(/etc/init.d/cjdns status)" != "running" ]]; then
        e "starting cjdns"
        /etc/init.d/cjdns start
    fi
}

restart_cjdns() {
    e "restarting cjdns"
    /etc/init.d/cjdns restart
}

get_vpn_gateway() {
    ifconfig tun0 2> /dev/null | grep "inet addr" | cut -d: -f2 | awk '{ print $1 }'
}

get_original_gateway() {
    if [[ -f "$orggatewayfile" ]]; then
        org_gw=$(cat "$orggatewayfile")
    else
        org_gw=$(route -n | grep '^0.0.0.0' | awk '{ print $2 }')
        echo "$org_gw" > "$orggatewayfile"
    fi
    echo "$org_gw"
}

gateway_is_up() {
    vpn_gateway=$(get_vpn_gateway)
    if [[ "$vpn_gateway" != "" ]]; then
        echo true
    fi
}

interface_dhcp_success() {
    if [[ "$(ifconfig "$internet_interface" | grep 'inet addr' | wc -l)" -gt 0 ]]; then
        echo true
    fi
}

mtu() {
    if [[ "$(ifconfig tun0 2> /dev/null | grep -i mtu | awk '{ print $6 }' | cut -d: -f 2)" -ne 1300 ]]; then
        e "setting mtu"
        ifconfig tun0 mtu 1300
    fi
}

original_gateway() {
    original_gateway=$(get_original_gateway)
    for remoteaddress in $remoteaddresses; do
        if [[ "$(route -n | egrep "$remoteaddress.*?$original_gateway" | wc -l)" -eq 0 ]]; then
            e "setting route $remoteaddress via $original_gateway dev $internet_interface"
            route add "$remoteaddress" gw "$original_gateway" "$internet_interface"
        fi
    done
}

defaultroute() {
    original_gateway=$(get_original_gateway)
    vpn_gateway=$(get_vpn_gateway)
    if [[ "$(route -n | egrep "0.0.0.0.*?$vpn_gateway" | wc -l)" -eq 0 ]]; then
        e "setting defaultroute"
        route del default
        route add default gw "$vpn_gateway" tun0
    fi
}

set_network_parameters() {
    mtu
    original_gateway
    defaultroute
}

set_status() {
    key=$1
    val=$2
    echo "$val" > "$netstat_file-$key"
}



# logic

if [[ "$(gateway_is_up)" == "true" ]]; then
    set_network_parameters
    e "checking internet connectivity over cjdns"
    if [[ "$($ping 8.8.8.8 | grep 'bytes from')" ]]; then
        echo "We have internet. Good."
        set_status "dhcp" 1
        set_status "internet" 1
        set_status "cjdns" 1
        set_status "cjdns_internet" 1
        rm "$cjdns_request_tries" 2> /dev/null
        exit
    fi
fi

echo "No internet via cjdns. Checking for regular internet connection..."
set_status "dhcp" 0
set_status "internet" 0
set_status "cjdns" 0
set_status "cjdns_internet" 0

# request dhcp
dhcp

if [[ "$(interface_dhcp_success)" == "true" ]]; then
    set_status "dhcp" 1
fi

# check for internet. if only one server with a direct route is pingable, we have an internet connection
wehaveinternet="no"
for remoteaddress in $remoteaddresses; do
    if [[ "$($ping "$remoteaddress" | grep 'bytes from')" ]]; then
        echo "internet detected"
        set_status "internet" 1
        wehaveinternet="yes"
        break
    fi
done

if [[ "$wehaveinternet" == "yes" && "$request_internet" == "yes" ]]; then
    request_cjdns_internet
    restart_cjdns
    set_status "cjdns" 1
    for i in `seq 60 -1 1`; do
        echo "waiting $i seconds for gateway to come up..."
        if [[ "$(gateway_is_up)" == "true" ]]; then
            e "gateway is up."
            set_network_parameters
            e "done."
            set_status "cjdns_internet" 1
            rm "$cjdns_request_tries" 2> /dev/null
            exit
        fi
        sleep 1
    done
else
    # we are not connected to the internet.
    # just ensure that cjdns is running, but DO NOT restart it!
    # since local phone calls may be active.
    start_cjdns
    set_status "cjdns" 1
fi

