#!/bin/ash

#set -xv

# variables
opkg_conf="/etc/enigmabox/opkg-testing.conf"
opkg="/bin/opkg -f $opkg_conf"
pubkey="/etc/enigmabox/rsa-pubkey.pem"
webinterface="http://127.0.0.1:8000"
pidfile="/var/run/updater.pid"
dynamic_output="/tmp/dynamic_output"
updates_output="/tmp/updates_output"



run() {
    background=""

    if [[ "$2" == "bg" ]]; then
        > "$dynamic_output"
        background=1
    fi

    if [[ "$1" == "check" ]]; then

        # validate all Packages
        for p in $(grep 'http://' "$opkg_conf" | awk '{ print $3 }'); do
            echo "$p"

            /usr/bin/wget -q "$p/Packages.gz"

            # skip that URL if 404
            if [[ ! -f Packages.gz ]]; then
                echo 'skipping'
                continue
            fi

            # check signature
            /usr/bin/wget -q "$p/Packages.gz.sig"
            if [[ $(/usr/bin/openssl dgst -sha512 -verify "$pubkey" -signature Packages.gz.sig Packages.gz | grep 'Verified OK' | wc -l) -eq 0 ]]; then
                rm Packages.gz*
                echo 'verification failed!'
                exit 1
            else
                echo 'ok'
                rm Packages.gz*
            fi
        done

        $opkg update

        # self update
        $opkg install missioncontrol

        $opkg list-upgradable | grep -v 'Multiple packages' | grep -v "$(/bin/uname -r)" | grep -v "^missioncontrol" | tee "$updates_output"

        # refresh updates count
        uc=$(wc -l < "$updates_output")
        curl --data "key=updates_count&value=$uc" -X POST "$webinterface/api/v1/set_option" &> /dev/null

    elif [[ "$1" == "apply" ]]; then
        if [[ "$background" == 1 ]]; then
            (updater_apply > "$dynamic_output") &
        else
            updater_apply
        fi

    elif [[ "$1" == "install" ]]; then
        $opkg install "$2" --force-depends

    elif [[ "$1" == "reinstall" ]]; then
        $opkg install "$2" --force-reinstall
    fi

}

inform_webinterface() {
    curl --data "key=updater_running&value=False" -X POST "$webinterface/api/v1/set_option" &> /dev/null
}



updater_apply() {

    # abort if there are no updates
    if [[ $(wc -l < "$updates_output") -eq 0 ]]; then
        exit 0
    fi

    # updater is running
    curl --data "key=updater_running&value=True" -X POST "$webinterface/api/v1/set_option" &> /dev/null

    # pre-update
    /usr/sbin/pre-update

    # upgrade every upgradable package
    while read package; do
        pkg=$(echo "$package" | cut -d' ' -f1)
        $opkg --force-depends upgrade "$pkg"
    done < "$updates_output"

    # post-update
    /usr/sbin/post-update

    # set update count to 0
    curl --data "key=updates_count&value=0" -X POST "$webinterface/api/v1/set_option" &> /dev/null

    echo 'rebooting...'
    sleep 3
    sync
    reboot

}



# Check if this script is already running
kill -0 $(cat "$pidfile" 2> /dev/null) 2> /dev/null
if [[ "$?" == "0" ]]; then
    echo "Script is already running, exiting"
    exit 1
else
    [[ -f "$pidfile" ]] && rm "$pidfile"
fi
echo $$ > "$pidfile"



run $1 $2
inform_webinterface

rm "$pidfile"

